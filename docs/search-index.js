var searchIndex = {};
searchIndex["ispell"] = {"doc":"This library provides an interface for easily calling the `ispell`\nor `aspell` command from Rust programs.","items":[[3,"IspellError","ispell","An ispell error, corresponding to a word that isn&#39;t in the dictonary.",null,null],[12,"mispelled","","The mispelled word",0,null],[12,"position","","The position of the word\n(number of characters since the beginning of the new line)",0,null],[12,"suggestions","","A list of suggestions",0,null],[3,"SpellChecker","","Spell Checker",null,null],[3,"SpellLauncher","","Spell Launcher wizard (ah, ah). A builder for `SpellChecker`.",null,null],[3,"Error","","Error type returned by methods of this library",null,null],[4,"IspellResult","","A result from ispell, corresponding to a line that is sent back for each word.",null,null],[13,"Ok","","The word was found in the dictionnary.",1,null],[13,"Root","","The word wasn&#39;t found, but a root word was found.",1,null],[13,"Compound","","The word wasn&#39;t found, but corresponds to the concatenation of two words",1,null],[13,"Miss","","The word wasn&#39;t found, but there are near misses",1,null],[13,"Guess","","The word wasn&#39;t found, but could be formed by adding illegal affixes to a known root",1,null],[13,"None","","The word wasn&#39;t found in the dictionnary and there are no suggestions",1,null],[11,"check","","Checks the spelling of a line.",2,null],[11,"check_raw","","Checks the spelling of a string",2,null],[11,"drop","","",2,null],[11,"fmt","","",3,null],[11,"new","","Creates a new spell checker with default options",3,{"inputs":[],"output":{"name":"spelllauncher"}}],[11,"aspell","","Sets mode to aspell instead of ispell.",3,null],[11,"hunspell","","Sets compatibility mode to hunspell instead of ispell.",3,null],[11,"command","","Set the name of the command to run",3,null],[11,"dictionary","","Determine the dictionary that should be used.",3,null],[11,"launch","","Launch `ispell` (or `aspell` or `hunspell`) and return a `SpellChecker`",3,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"new","","Creates a new default error",4,{"inputs":[{"name":"s"}],"output":{"name":"error"}}],[11,"process","","Create a new process error",4,{"inputs":[{"name":"s"}],"output":{"name":"error"}}],[11,"utf8","","Create a new UTF8 error",4,{"inputs":[{"name":"s"}],"output":{"name":"error"}}],[11,"protocol","","Creates a new protocol error",4,{"inputs":[{"name":"s"}],"output":{"name":"error"}}],[11,"description","","",4,null],[11,"fmt","","",4,null],[11,"from","","",4,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",4,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[6,"Result","","Result type (returned by most methods of this library)",null,null]],"paths":[[3,"IspellError"],[4,"IspellResult"],[3,"SpellChecker"],[3,"SpellLauncher"],[3,"Error"]]};
initSearch(searchIndex);
